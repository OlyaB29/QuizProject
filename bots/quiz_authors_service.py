from aiogram import Bot, types, executor
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import re
import aiohttp
from bot_config import TOKEN
import logging

logging.basicConfig(level=logging.INFO)

storage = MemoryStorage()
bot = Bot(token=TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=storage)


class QuizAuthorCreate(StatesGroup):
    set_username = State()
    set_password = State()
    confirm_password = State()
    set_phone = State()
    confirm = State()


def create_keyboard(k):
    keyboard = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data='back')
    quiz_admin_btn = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–±–æ—Ç–µ –Ω–∞–¥ –∫–≤–∏–∑–∞–º–∏", url='http://127.0.0.1:8000/admin')
    if k == 'main':
        register_btn = types.InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data='register')
        keyboard.add(register_btn)
        keyboard.add(quiz_admin_btn)
    elif k == 'back':
        keyboard.add(back_btn)
    elif k == 'go_to_confirm':
        without_phone_btn = types.InlineKeyboardButton(text="–ù–µ –∂–µ–ª–∞—é", callback_data='without_phone')
        keyboard.add(without_phone_btn)
        keyboard.add(back_btn)
    elif k == 'confirm':
        conf_btn = types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='ok')
        keyboard.add(conf_btn)
        keyboard.add(back_btn)
    return keyboard


def create_message(data):
    to_send_message = '<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - ' + data.get('username') + '\n–ü–∞—Ä–æ–ª—å - ' + data.get('password')
    if data.get('phone'):
        to_send_message += '\n–¢–µ–ª–µ—Ñ–æ–Ω - ' + data.get('phone')
    to_send_message += '\n\n–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ'
    return to_send_message


async def user_register(data):
    url = "http://127.0.0.1:8000/auth/users/"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, data=data) as resp:
                print("Status:", resp.status)
                resp_json = await resp.json()
                print(resp_json)
                return resp.status, resp_json
    except Exception as error:
        print(error)
        return ('error',)


@dp.message_handler(commands=['start'], state='*')
async def start_bot(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–µ—Ä–≤–∏—Å–µ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫–≤–∏–∑–æ–≤, —Å—Ç–∞–≤ –æ–¥–Ω–∏–º '
                         '–∏–∑ –Ω–∞—à–∏—Ö –∞–≤—Ç–æ—Ä–æ–≤, –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–±–æ—Ç–µ', reply_markup=create_keyboard('main'))


@dp.message_handler(state=QuizAuthorCreate.set_username)
async def define_username(message: types.Message, state: FSMContext):
    await state.update_data(username=message.text)
    await message.answer('üëá –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å', reply_markup=create_keyboard('back'))
    await QuizAuthorCreate.next()


@dp.message_handler(state=QuizAuthorCreate.set_password)
async def define_password(message: types.Message, state: FSMContext):
    pattern_password = re.compile(r'^(?=.*[0-9].*)(?=.*[a-z].*)(?=.*[A-Z].*)[0-9a-zA-Z]{8,}$')
    if pattern_password.match(message.text):
        await state.update_data(password=message.text)
        await QuizAuthorCreate.next()
        mess = 'üëá –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'
    else:
        mess = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É, —Å—Ç—Ä–æ—á–Ω—É—é –∏ –∑–∞–≥–ª–∞–≤–Ω—É—é –ª–∞—Ç–∏–Ω—Å–∫—É—é –±—É–∫–≤—É –∏ —Å–æ—Å—Ç–æ—è—Ç—å –º–∏–Ω–∏–º—É–º –∏–∑ ' \
               '8 —Å–∏–º–≤–æ–ª–æ–≤.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å'
    await message.answer(mess, reply_markup=create_keyboard('back'))
    await message.delete()


@dp.message_handler(state=QuizAuthorCreate.confirm_password)
async def confirm_password(message: types.Message, state: FSMContext):
    data = await state.get_data()
    password = data.get('password')
    if message.text == password:
        await message.answer('üëá –ï—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +375xxxxxxxxx, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥—É—Ç '
                             '–ø—Ä–∏—Ö–æ–¥–∏—Ç—å SMS —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–∞—à–∏—Ö –∫–≤–∏–∑–æ–≤ (–ø–æ–º–∏–º–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ',
                             reply_markup=create_keyboard('go_to_confirm'))
        await QuizAuthorCreate.next()
    else:
        await message.answer('üëá –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ', reply_markup=create_keyboard('back'))
        await QuizAuthorCreate.previous()
    await message.delete()


@dp.message_handler(state=QuizAuthorCreate.set_phone)
async def define_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    data = await state.get_data()
    data_msg = await message.answer(create_message(data), reply_markup=create_keyboard('confirm'))
    await state.update_data(msg=data_msg)
    await QuizAuthorCreate.next()


@dp.callback_query_handler(lambda call: call.data == 'without_phone', state=QuizAuthorCreate.set_phone)
async def without_phone(call: types.CallbackQuery, state: FSMContext):
    if call.message:
        await bot.answer_callback_query(call.id)
        data = await state.get_data()
        data_msg = await bot.send_message(
            chat_id=call.message.chat.id,
            text=create_message(data),
            reply_markup=create_keyboard('confirm')
        )
        await state.update_data(msg=data_msg)
        await QuizAuthorCreate.next()


@dp.callback_query_handler(lambda call: call.data == 'ok', state=QuizAuthorCreate.confirm)
async def make_registration(call: types.CallbackQuery, state: FSMContext):
    if call.message:
        await bot.answer_callback_query(call.id)
        data = await state.get_data()
        await data['msg'].delete()
        # data['msg'] = None
        data['tg_id'] = call.message.chat.id
        data['is_staff'] = True
        data.pop('msg')
        print(data)
        result = await user_register(data)
        if result[0] == 201:
            msg = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Ä–∞–±–æ—Ç–µ.\n\n' \
                  '–ò –≤—Å—Ç—É–ø–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é —Å –±–æ—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ –í–∞—à–µ–º—É –∂–µ–ª–∞–Ω–∏—é –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ' \
                  '–ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –í–∞—à–∏—Ö –∫–≤–∏–∑–æ–≤\nhttp://t.me/quiz_results_sender_bot'
        elif result[0] == 400 and result[1]['username'][0] == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.":
            msg = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç,\n–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞'
        else:
            msg = '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞'

        await bot.send_message(
            chat_id=call.message.chat.id,
            text=msg,
            reply_markup=create_keyboard('main')
        )
        await state.finish()


@dp.callback_query_handler(lambda call: True, state='*')
async def keyboard_answer(call: types.CallbackQuery, state: FSMContext):
    if call.message:
        await bot.answer_callback_query(call.id)
        if call.data == "register":
            await state.finish()
            await QuizAuthorCreate.set_username.set()
            await bot.send_message(
                chat_id=call.message.chat.id,
                text='üëá –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–∞—Ç–∏–Ω–∏—Ü–µ–π',
                reply_markup=create_keyboard('back'))
        elif call.data == "back":
            await state.finish()
            await bot.send_message(
                chat_id=call.message.chat.id,
                text='üëá –°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä',
                reply_markup=create_keyboard('main'))


if __name__ == "__main__":
    executor.start_polling(dp)
